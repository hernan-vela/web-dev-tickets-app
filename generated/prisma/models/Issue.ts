
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Issue` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Issue
 * 
 */
export type IssueModel = runtime.Types.Result.DefaultSelection<Prisma.$IssuePayload>

export type AggregateIssue = {
  _count: IssueCountAggregateOutputType | null
  _avg: IssueAvgAggregateOutputType | null
  _sum: IssueSumAggregateOutputType | null
  _min: IssueMinAggregateOutputType | null
  _max: IssueMaxAggregateOutputType | null
}

export type IssueAvgAggregateOutputType = {
  id: number | null
}

export type IssueSumAggregateOutputType = {
  id: number | null
}

export type IssueMinAggregateOutputType = {
  id: number | null
  title: string | null
  description: string | null
  status: $Enums.Status | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type IssueMaxAggregateOutputType = {
  id: number | null
  title: string | null
  description: string | null
  status: $Enums.Status | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type IssueCountAggregateOutputType = {
  id: number
  title: number
  description: number
  status: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type IssueAvgAggregateInputType = {
  id?: true
}

export type IssueSumAggregateInputType = {
  id?: true
}

export type IssueMinAggregateInputType = {
  id?: true
  title?: true
  description?: true
  status?: true
  createdAt?: true
  updatedAt?: true
}

export type IssueMaxAggregateInputType = {
  id?: true
  title?: true
  description?: true
  status?: true
  createdAt?: true
  updatedAt?: true
}

export type IssueCountAggregateInputType = {
  id?: true
  title?: true
  description?: true
  status?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type IssueAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Issue to aggregate.
   */
  where?: Prisma.IssueWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Issues to fetch.
   */
  orderBy?: Prisma.IssueOrderByWithRelationInput | Prisma.IssueOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.IssueWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Issues from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Issues.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Issues
  **/
  _count?: true | IssueCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: IssueAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: IssueSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: IssueMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: IssueMaxAggregateInputType
}

export type GetIssueAggregateType<T extends IssueAggregateArgs> = {
      [P in keyof T & keyof AggregateIssue]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateIssue[P]>
    : Prisma.GetScalarType<T[P], AggregateIssue[P]>
}




export type IssueGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.IssueWhereInput
  orderBy?: Prisma.IssueOrderByWithAggregationInput | Prisma.IssueOrderByWithAggregationInput[]
  by: Prisma.IssueScalarFieldEnum[] | Prisma.IssueScalarFieldEnum
  having?: Prisma.IssueScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: IssueCountAggregateInputType | true
  _avg?: IssueAvgAggregateInputType
  _sum?: IssueSumAggregateInputType
  _min?: IssueMinAggregateInputType
  _max?: IssueMaxAggregateInputType
}

export type IssueGroupByOutputType = {
  id: number
  title: string
  description: string
  status: $Enums.Status
  createdAt: Date
  updatedAt: Date
  _count: IssueCountAggregateOutputType | null
  _avg: IssueAvgAggregateOutputType | null
  _sum: IssueSumAggregateOutputType | null
  _min: IssueMinAggregateOutputType | null
  _max: IssueMaxAggregateOutputType | null
}

type GetIssueGroupByPayload<T extends IssueGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<IssueGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof IssueGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], IssueGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], IssueGroupByOutputType[P]>
      }
    >
  >



export type IssueWhereInput = {
  AND?: Prisma.IssueWhereInput | Prisma.IssueWhereInput[]
  OR?: Prisma.IssueWhereInput[]
  NOT?: Prisma.IssueWhereInput | Prisma.IssueWhereInput[]
  id?: Prisma.IntFilter<"Issue"> | number
  title?: Prisma.StringFilter<"Issue"> | string
  description?: Prisma.StringFilter<"Issue"> | string
  status?: Prisma.EnumStatusFilter<"Issue"> | $Enums.Status
  createdAt?: Prisma.DateTimeFilter<"Issue"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Issue"> | Date | string
}

export type IssueOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _relevance?: Prisma.IssueOrderByRelevanceInput
}

export type IssueWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.IssueWhereInput | Prisma.IssueWhereInput[]
  OR?: Prisma.IssueWhereInput[]
  NOT?: Prisma.IssueWhereInput | Prisma.IssueWhereInput[]
  title?: Prisma.StringFilter<"Issue"> | string
  description?: Prisma.StringFilter<"Issue"> | string
  status?: Prisma.EnumStatusFilter<"Issue"> | $Enums.Status
  createdAt?: Prisma.DateTimeFilter<"Issue"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Issue"> | Date | string
}, "id">

export type IssueOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.IssueCountOrderByAggregateInput
  _avg?: Prisma.IssueAvgOrderByAggregateInput
  _max?: Prisma.IssueMaxOrderByAggregateInput
  _min?: Prisma.IssueMinOrderByAggregateInput
  _sum?: Prisma.IssueSumOrderByAggregateInput
}

export type IssueScalarWhereWithAggregatesInput = {
  AND?: Prisma.IssueScalarWhereWithAggregatesInput | Prisma.IssueScalarWhereWithAggregatesInput[]
  OR?: Prisma.IssueScalarWhereWithAggregatesInput[]
  NOT?: Prisma.IssueScalarWhereWithAggregatesInput | Prisma.IssueScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Issue"> | number
  title?: Prisma.StringWithAggregatesFilter<"Issue"> | string
  description?: Prisma.StringWithAggregatesFilter<"Issue"> | string
  status?: Prisma.EnumStatusWithAggregatesFilter<"Issue"> | $Enums.Status
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Issue"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Issue"> | Date | string
}

export type IssueCreateInput = {
  title: string
  description: string
  status?: $Enums.Status
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type IssueUncheckedCreateInput = {
  id?: number
  title: string
  description: string
  status?: $Enums.Status
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type IssueUpdateInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumStatusFieldUpdateOperationsInput | $Enums.Status
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type IssueUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumStatusFieldUpdateOperationsInput | $Enums.Status
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type IssueCreateManyInput = {
  id?: number
  title: string
  description: string
  status?: $Enums.Status
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type IssueUpdateManyMutationInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumStatusFieldUpdateOperationsInput | $Enums.Status
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type IssueUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumStatusFieldUpdateOperationsInput | $Enums.Status
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type IssueOrderByRelevanceInput = {
  fields: Prisma.IssueOrderByRelevanceFieldEnum | Prisma.IssueOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type IssueCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type IssueAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type IssueMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type IssueMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type IssueSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type EnumStatusFieldUpdateOperationsInput = {
  set?: $Enums.Status
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}



export type IssueSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  description?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["issue"]>



export type IssueSelectScalar = {
  id?: boolean
  title?: boolean
  description?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type IssueOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "title" | "description" | "status" | "createdAt" | "updatedAt", ExtArgs["result"]["issue"]>

export type $IssuePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Issue"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    title: string
    description: string
    status: $Enums.Status
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["issue"]>
  composites: {}
}

export type IssueGetPayload<S extends boolean | null | undefined | IssueDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$IssuePayload, S>

export type IssueCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<IssueFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: IssueCountAggregateInputType | true
  }

export interface IssueDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Issue'], meta: { name: 'Issue' } }
  /**
   * Find zero or one Issue that matches the filter.
   * @param {IssueFindUniqueArgs} args - Arguments to find a Issue
   * @example
   * // Get one Issue
   * const issue = await prisma.issue.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends IssueFindUniqueArgs>(args: Prisma.SelectSubset<T, IssueFindUniqueArgs<ExtArgs>>): Prisma.Prisma__IssueClient<runtime.Types.Result.GetResult<Prisma.$IssuePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Issue that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {IssueFindUniqueOrThrowArgs} args - Arguments to find a Issue
   * @example
   * // Get one Issue
   * const issue = await prisma.issue.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends IssueFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, IssueFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__IssueClient<runtime.Types.Result.GetResult<Prisma.$IssuePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Issue that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IssueFindFirstArgs} args - Arguments to find a Issue
   * @example
   * // Get one Issue
   * const issue = await prisma.issue.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends IssueFindFirstArgs>(args?: Prisma.SelectSubset<T, IssueFindFirstArgs<ExtArgs>>): Prisma.Prisma__IssueClient<runtime.Types.Result.GetResult<Prisma.$IssuePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Issue that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IssueFindFirstOrThrowArgs} args - Arguments to find a Issue
   * @example
   * // Get one Issue
   * const issue = await prisma.issue.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends IssueFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, IssueFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__IssueClient<runtime.Types.Result.GetResult<Prisma.$IssuePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Issues that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IssueFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Issues
   * const issues = await prisma.issue.findMany()
   * 
   * // Get first 10 Issues
   * const issues = await prisma.issue.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const issueWithIdOnly = await prisma.issue.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends IssueFindManyArgs>(args?: Prisma.SelectSubset<T, IssueFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$IssuePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Issue.
   * @param {IssueCreateArgs} args - Arguments to create a Issue.
   * @example
   * // Create one Issue
   * const Issue = await prisma.issue.create({
   *   data: {
   *     // ... data to create a Issue
   *   }
   * })
   * 
   */
  create<T extends IssueCreateArgs>(args: Prisma.SelectSubset<T, IssueCreateArgs<ExtArgs>>): Prisma.Prisma__IssueClient<runtime.Types.Result.GetResult<Prisma.$IssuePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Issues.
   * @param {IssueCreateManyArgs} args - Arguments to create many Issues.
   * @example
   * // Create many Issues
   * const issue = await prisma.issue.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends IssueCreateManyArgs>(args?: Prisma.SelectSubset<T, IssueCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Issue.
   * @param {IssueDeleteArgs} args - Arguments to delete one Issue.
   * @example
   * // Delete one Issue
   * const Issue = await prisma.issue.delete({
   *   where: {
   *     // ... filter to delete one Issue
   *   }
   * })
   * 
   */
  delete<T extends IssueDeleteArgs>(args: Prisma.SelectSubset<T, IssueDeleteArgs<ExtArgs>>): Prisma.Prisma__IssueClient<runtime.Types.Result.GetResult<Prisma.$IssuePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Issue.
   * @param {IssueUpdateArgs} args - Arguments to update one Issue.
   * @example
   * // Update one Issue
   * const issue = await prisma.issue.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends IssueUpdateArgs>(args: Prisma.SelectSubset<T, IssueUpdateArgs<ExtArgs>>): Prisma.Prisma__IssueClient<runtime.Types.Result.GetResult<Prisma.$IssuePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Issues.
   * @param {IssueDeleteManyArgs} args - Arguments to filter Issues to delete.
   * @example
   * // Delete a few Issues
   * const { count } = await prisma.issue.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends IssueDeleteManyArgs>(args?: Prisma.SelectSubset<T, IssueDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Issues.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IssueUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Issues
   * const issue = await prisma.issue.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends IssueUpdateManyArgs>(args: Prisma.SelectSubset<T, IssueUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Issue.
   * @param {IssueUpsertArgs} args - Arguments to update or create a Issue.
   * @example
   * // Update or create a Issue
   * const issue = await prisma.issue.upsert({
   *   create: {
   *     // ... data to create a Issue
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Issue we want to update
   *   }
   * })
   */
  upsert<T extends IssueUpsertArgs>(args: Prisma.SelectSubset<T, IssueUpsertArgs<ExtArgs>>): Prisma.Prisma__IssueClient<runtime.Types.Result.GetResult<Prisma.$IssuePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Issues.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IssueCountArgs} args - Arguments to filter Issues to count.
   * @example
   * // Count the number of Issues
   * const count = await prisma.issue.count({
   *   where: {
   *     // ... the filter for the Issues we want to count
   *   }
   * })
  **/
  count<T extends IssueCountArgs>(
    args?: Prisma.Subset<T, IssueCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], IssueCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Issue.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IssueAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends IssueAggregateArgs>(args: Prisma.Subset<T, IssueAggregateArgs>): Prisma.PrismaPromise<GetIssueAggregateType<T>>

  /**
   * Group by Issue.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IssueGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends IssueGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: IssueGroupByArgs['orderBy'] }
      : { orderBy?: IssueGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, IssueGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIssueGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Issue model
 */
readonly fields: IssueFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Issue.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__IssueClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Issue model
 */
export interface IssueFieldRefs {
  readonly id: Prisma.FieldRef<"Issue", 'Int'>
  readonly title: Prisma.FieldRef<"Issue", 'String'>
  readonly description: Prisma.FieldRef<"Issue", 'String'>
  readonly status: Prisma.FieldRef<"Issue", 'Status'>
  readonly createdAt: Prisma.FieldRef<"Issue", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Issue", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Issue findUnique
 */
export type IssueFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Issue
   */
  select?: Prisma.IssueSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Issue
   */
  omit?: Prisma.IssueOmit<ExtArgs> | null
  /**
   * Filter, which Issue to fetch.
   */
  where: Prisma.IssueWhereUniqueInput
}

/**
 * Issue findUniqueOrThrow
 */
export type IssueFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Issue
   */
  select?: Prisma.IssueSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Issue
   */
  omit?: Prisma.IssueOmit<ExtArgs> | null
  /**
   * Filter, which Issue to fetch.
   */
  where: Prisma.IssueWhereUniqueInput
}

/**
 * Issue findFirst
 */
export type IssueFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Issue
   */
  select?: Prisma.IssueSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Issue
   */
  omit?: Prisma.IssueOmit<ExtArgs> | null
  /**
   * Filter, which Issue to fetch.
   */
  where?: Prisma.IssueWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Issues to fetch.
   */
  orderBy?: Prisma.IssueOrderByWithRelationInput | Prisma.IssueOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Issues.
   */
  cursor?: Prisma.IssueWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Issues from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Issues.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Issues.
   */
  distinct?: Prisma.IssueScalarFieldEnum | Prisma.IssueScalarFieldEnum[]
}

/**
 * Issue findFirstOrThrow
 */
export type IssueFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Issue
   */
  select?: Prisma.IssueSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Issue
   */
  omit?: Prisma.IssueOmit<ExtArgs> | null
  /**
   * Filter, which Issue to fetch.
   */
  where?: Prisma.IssueWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Issues to fetch.
   */
  orderBy?: Prisma.IssueOrderByWithRelationInput | Prisma.IssueOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Issues.
   */
  cursor?: Prisma.IssueWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Issues from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Issues.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Issues.
   */
  distinct?: Prisma.IssueScalarFieldEnum | Prisma.IssueScalarFieldEnum[]
}

/**
 * Issue findMany
 */
export type IssueFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Issue
   */
  select?: Prisma.IssueSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Issue
   */
  omit?: Prisma.IssueOmit<ExtArgs> | null
  /**
   * Filter, which Issues to fetch.
   */
  where?: Prisma.IssueWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Issues to fetch.
   */
  orderBy?: Prisma.IssueOrderByWithRelationInput | Prisma.IssueOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Issues.
   */
  cursor?: Prisma.IssueWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Issues from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Issues.
   */
  skip?: number
  distinct?: Prisma.IssueScalarFieldEnum | Prisma.IssueScalarFieldEnum[]
}

/**
 * Issue create
 */
export type IssueCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Issue
   */
  select?: Prisma.IssueSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Issue
   */
  omit?: Prisma.IssueOmit<ExtArgs> | null
  /**
   * The data needed to create a Issue.
   */
  data: Prisma.XOR<Prisma.IssueCreateInput, Prisma.IssueUncheckedCreateInput>
}

/**
 * Issue createMany
 */
export type IssueCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Issues.
   */
  data: Prisma.IssueCreateManyInput | Prisma.IssueCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Issue update
 */
export type IssueUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Issue
   */
  select?: Prisma.IssueSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Issue
   */
  omit?: Prisma.IssueOmit<ExtArgs> | null
  /**
   * The data needed to update a Issue.
   */
  data: Prisma.XOR<Prisma.IssueUpdateInput, Prisma.IssueUncheckedUpdateInput>
  /**
   * Choose, which Issue to update.
   */
  where: Prisma.IssueWhereUniqueInput
}

/**
 * Issue updateMany
 */
export type IssueUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Issues.
   */
  data: Prisma.XOR<Prisma.IssueUpdateManyMutationInput, Prisma.IssueUncheckedUpdateManyInput>
  /**
   * Filter which Issues to update
   */
  where?: Prisma.IssueWhereInput
  /**
   * Limit how many Issues to update.
   */
  limit?: number
}

/**
 * Issue upsert
 */
export type IssueUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Issue
   */
  select?: Prisma.IssueSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Issue
   */
  omit?: Prisma.IssueOmit<ExtArgs> | null
  /**
   * The filter to search for the Issue to update in case it exists.
   */
  where: Prisma.IssueWhereUniqueInput
  /**
   * In case the Issue found by the `where` argument doesn't exist, create a new Issue with this data.
   */
  create: Prisma.XOR<Prisma.IssueCreateInput, Prisma.IssueUncheckedCreateInput>
  /**
   * In case the Issue was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.IssueUpdateInput, Prisma.IssueUncheckedUpdateInput>
}

/**
 * Issue delete
 */
export type IssueDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Issue
   */
  select?: Prisma.IssueSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Issue
   */
  omit?: Prisma.IssueOmit<ExtArgs> | null
  /**
   * Filter which Issue to delete.
   */
  where: Prisma.IssueWhereUniqueInput
}

/**
 * Issue deleteMany
 */
export type IssueDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Issues to delete
   */
  where?: Prisma.IssueWhereInput
  /**
   * Limit how many Issues to delete.
   */
  limit?: number
}

/**
 * Issue without action
 */
export type IssueDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Issue
   */
  select?: Prisma.IssueSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Issue
   */
  omit?: Prisma.IssueOmit<ExtArgs> | null
}
